# -*- coding: utf-8 -*-
"""Codage LZW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/gabilodeau/INF8770/blob/master/Codage%20LZW.ipynb

INF8770 Technologies multimédias

Polytechnique Montréal

Exemple de codage LZW
"""

import numpy as np

def getOriginalSize(message):
    dictsymb = [message[0]]
    dictbin = ["{:b}".format(0)]
    nbsymboles = 1
    for i in range(1, len(message)):
        if message[i] not in dictsymb:
            dictsymb += [message[i]]
            dictbin += ["{:b}".format(nbsymboles)]
            nbsymboles += 1

    return(np.ceil(np.log2(nbsymboles))*len(message))

def encode_lzw(message):

    """Message à coder"""

    Message = message

    """Construction du dictionnaire à partir des symboles contenus dans le message."""

    dictsymb = [Message[0]]
    dictbin = ["{:b}".format(0)]
    nbsymboles = 1
    for i in range(1, len(Message)):
        if Message[i] not in dictsymb:
            dictsymb += [Message[i]]
            dictbin += ["{:b}".format(nbsymboles)]
            nbsymboles += 1

    longueurOriginale = np.ceil(np.log2(nbsymboles))*len(Message)
    """Ajustement des codes binaires selon le nombre total de symboles en ajoutant des zéros. Tri des symboles. Affichage du dictionnaire initial."""

    for i in range(nbsymboles):
        dictbin[i] = "{:b}".format(i).zfill(int(np.ceil(np.log2(nbsymboles))))

    dictsymb.sort()
    dictionnaire = np.transpose([dictsymb, dictbin])

    """Codage du message"""
    i = 0
    MessageCode = []
    longueur = 0
    while i < len(Message):
        precsouschaine = Message[i]  # sous-chaine qui sera codé
        # sous-chaine qui sera codé + 1 caractère (pour le dictionnaire)
        souschaine = Message[i]

        # Cherche la plus grande sous-chaine. On ajoute un caractère au fur et à mesure.
        while souschaine in dictsymb and i < len(Message):
            i += 1
            precsouschaine = souschaine
            if i < len(Message):  # Si on a pas atteint la fin du message
                souschaine += Message[i]
        
        # Codage de la plus grande sous-chaine à l'aide du dictionnaire
        codebinaire = [dictbin[dictsymb.index(precsouschaine)]]
        MessageCode += codebinaire
        longueur += len(codebinaire[0])
        # Ajout de la sous-chaine codé + symbole suivant dans le dictionnaire.
        if i < len(Message):
            dictsymb += [souschaine]
            dictbin += ["{:b}".format(nbsymboles)]
            nbsymboles += 1

        # Ajout de 1 bit si requis
        if np.ceil(np.log2(nbsymboles)) > len(MessageCode[-1]):
            for j in range(nbsymboles):
                dictbin[j] = "{:b}".format(j).zfill(
                    int(np.ceil(np.log2(nbsymboles))))

    """Affichage du message codé"""

    """Affichage du dictionnaire final"""
    dictionnaire = np.transpose([dictsymb, dictbin])
    """Longueur en bits du message codé et celle de l'original"""

    print("Longueur = {0}".format(longueur))
    print("Longueur originale = {0}".format(longueurOriginale))


    return longueur
