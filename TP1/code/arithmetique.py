# -*- coding: utf-8 -*-
"""Codage arithmetique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/gabilodeau/INF8770/blob/master/Codage%20arithmetique.ipynb

INF8770 Technologies multimédias

Polytechnique Montréal  

Exemple de codage arithmétique
"""

import numpy as np
import time
from Result import CodeResult 

def algo(Message, SymbACoder):

    """ Début du chronomètre"""
    start = time.time()

    """Calcul des probabilités de chaque symbole."""

    ProbSymb =[[Message[0], Message.count(Message[0])/len(Message)]]
    nbsymboles = 1

    for i in range(1,len(Message)):
        if not list(filter(lambda x: x[0] == Message[i], ProbSymb)):
            ProbSymb += [[Message[i], ProbSymb[-1][1]+Message.count(Message[i])/len(Message)]]
            nbsymboles += 1
            
    longueurOriginale = np.ceil(np.log2(nbsymboles))*SymbACoder


    """Codage du message. On divise successivement l'intervalle représentant le symbole à coder."""

    Code = ProbSymb[:]
    Code = [['', 0]] + ProbSymb[:]
    for i in range(SymbACoder): 
        #Cherche dans quel intervalle est le symbole à coder
        temp = list(filter(lambda x: x[0] == Message[i], Code))
        indice = Code.index(temp[0])

        #Calcul des bornes pour coder le caractère
        Debut = Code[indice-1][1]
        Plage = Code[indice][1] - Debut   
        #Nouveaux intervalles pour coder le prochain symbole
        Code = [['', Debut]]  
        for j in range(len(ProbSymb)):
            Code += [[ProbSymb[j][0], Debut+ProbSymb[j][1]*Plage]]


    """On choisit une valeur dans l'intervalle final. On cherche la valeur qui prend le moins de bits. On fait la somme de puissance négative de 2. Permet aussi d'obtenir le code binaire."""

    ok = True
    valfinale = 0
    valEnBits = list('')
    p = 0
    while ok:
        p += 1
        #Essayer différentes sommes de puissance négative de 2
        puissance = np.power(2.0,-p)
        valfinale += puissance
        valEnBits += '1' 
        if(puissance == 0):
            break
        if valfinale >= (Debut + Plage):
            valfinale -= np.power(2.0,-p) #Hors de la borne maximale, on annule l'ajout.
            valEnBits[-1] ='0'
        elif valfinale >= Debut:
            ok = False
    """Autre façon de convertir en bits qui permet de voir l'importance du choix de la valeur finale."""

    #Table hex vers binaire
    hex2bin = dict('{:x} {:04b}'.format(x,x).split() for x in range(16))

    def float_dec2bin(d):
        
        #Note: je ne suis pas sûr que cela fonctionne toujours... J'ai fait un nombre de tests limité.
        
        hx = float(d).hex() #Conversion float vers hex
        p = hx.index('p')
        #Conversion hex vers bin avec la table
        bn = ''.join(hex2bin.get(char, char) for char in hx[2:p])
        code = list(bn)
        indice = code.index('.') # position du séparateur des décimales
        puissance = int(hx[p+2:]) # Décalage
        if puissance >= indice:
            #On ajoute des zéros pour pouvoir décaler le séparateur des décimales.
            zerosdeplus = "0" * (puissance-indice+1)
            bn = zerosdeplus + bn
            code = list(bn)
            indice = code.index('.') # nouvelle position du séparateur des décimales

        #Décalage du séparateur décimal selon la puissance    
        for i in range(0,puissance):
            temp = code[indice-i-1]
            code[indice-i-1] = code[indice-i]
            code[indice-i] = temp

        #Enlève les zéros de trop et la partie avant le séparateur décimal
        
        ind = code.index('.')+1
        code = code[ind:]
        ind= code[::-1].index('1')
        code = code[:(len(code)-ind)]   
        codebinaire = ''.join(code)

        return codebinaire

    messagecode = float_dec2bin(valfinale) #Essayer d'autres valeurs qui tombent dans l'intervalle

    """ Fin chronomètre """
    end = time.time()
    temps = end - start
    """Longueur en bits du message codé et celle de l'original"""
    print("Arithmetique: ")

    longueur = len(messagecode)
    print("Longueur = {0}".format(longueur))
    print("Longueur originale = {0}".format(longueurOriginale))
    print("Temps d'exécution: " + str(temps))

    result = CodeResult(longueurOriginale, longueur, temps)
    return result